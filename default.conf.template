include       mime.types;
default_type  application/octet-stream;

js_path "/etc/nginx/njs/";
js_import decode_uri.js;
js_set $dec_ddforward_uri decode_uri.decode_ddforward_uri;
js_set $dec_ddforward_args decode_uri.decode_ddforward_args;

# Caches
proxy_cache_path /var/cache/od-api levels=1:2 keys_zone=od_api_cache:10m inactive=1y;

# Map the presence of X-Cache-Api header to a $no_api_cache variable
map $http_x_cache_api $no_api_cache {
  default 1;
  "~." 0;
}

# Upstreams
upstream od-api {
  server $OD_API_HOST:443;
}

log_format gateway_log_format escape=json
'{'
  '"remote_addr": "$remote_addr",'
  '"time_local": "$time_local",'
  '"request": "$request",'
  '"status": $status,'
  '"user_agent": "$http_user_agent",'
  '"no_api_cache": "$no_api_cache",'
  '"X-Gateway-Cache-Status": "$upstream_cache_status",'
  '"X-Forwarded-For": "$http_x_forwarded_for"'
'}';

server {
  listen $PORT default_server;

  # Cache responses of requests where X-Cache-Api header is present
  location /api/ {
    access_log /dev/stdout gateway_log_format;

    client_body_buffer_size 64k;
    proxy_buffer_size 128k;
    proxy_buffers 8 128k;
    proxy_busy_buffers_size 256k;

    proxy_pass https://od-api/;
    proxy_ssl_name $OD_API_HOST;
    proxy_ssl_server_name on;
    proxy_set_header Host $OD_API_HOST;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_pass_request_headers on;

    proxy_cache od_api_cache;
    proxy_cache_methods GET POST;
    proxy_cache_key "$scheme$proxy_host$uri$is_args$args$request_body$content_length";
    proxy_cache_valid 200 10s;
    proxy_cache_valid 404 5s;
    proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
    proxy_cache_lock on;
    proxy_cache_lock_age 5s;
    proxy_cache_lock_timeout 10s;
    proxy_cache_bypass $no_api_cache;
    proxy_no_cache $no_api_cache;

    add_header X-Gateway-Cache-Status $upstream_cache_status;
  }

  location /login/callback {
    set $login_path /login;
    if ($cookie_login_origin) {
        return 301 $cookie_login_origin$login_path$is_args$args;
    }
    return 403;
  }

  location /login {
    if ($arg_redirect_url) {
      add_header Set-Cookie "login_origin=$arg_redirect_url;Path=/;HttpOnly";
      return 301 https://develop.auth.onlydust.xyz/signin/provider/github;
    }
    return 403;
  }

  location /datadog {
    resolver 8.8.8.8  [::1];

    proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_pass          https://browser-intake-datadoghq.eu$dec_ddforward_uri?$dec_ddforward_args;
    proxy_set_header    Host $host;
  }
}
